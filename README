Ensimag 2A POO - TP 2018/19
============================

- src: contient les classes fournies par les enseignants
  -> LecteurDonnees.java         : lit tous les elements d'un fichier de description de donnees (cases, incendies et robots) et les affiche.
                                   A vous de MODIFIER cette classe (ou en ecrire une nouvelle) pour creer les objets correspondants à vos propres classes
  -> TestLecteurDonnees.java     : lit un fichier de donnees et affiche son contenu
  -> TestInvader                 : cree un simulateur "mini Invaders" dans une fenetre graphique

- cartes: quelques exemples de fichiers de donnees

- bin/gui.jar: archive Java contenant les classes de l'interface graphique. Voir un exemple d'utilisation dans TestInvader.java

- doc: la documentation (API) des classes de l'interface graphique contenues dans gui.jar. Point d'entrée: index.html

- Makefile: quelques explications sur la compilation en ligne, notamment la notion de classpath et l'utilisation de gui.jar



============================
RMQ DE BIGE

Etapes du projet :

1) Lire les données du fichier et les rentrer dans un objet de classe DonneesSimulation (Carte, Robots, Incendies)

- choisir le choix des données et compléter DonneesSimulation, je propose des tableaux pour les robots et incendies :
		=> la Carte : un objet de classe Carte
		=> les Robots : un tableau d'objets de classe Robot (avec sous-classe si aérien ou terrestre)
		=> les incendies : un tableau d'objets de classe Incendie
		
- compléter le fichier test TestDonneesSimulation pour pouvoir tester au fur et à mesure que l'on écrive nos classes

- compléter les méthodes/attributs des classes de données :
		=> Carte
		=> Case
		=> Incendie
		=> Robot : - terrestre (3 types)
				   - aérien
				 

	(j'ai créé des enum pour NatureTerrain et Direction, il faudra peut-être leur ajouter des méthodes)

!!!! A CE STADE : on aura un objet de classe DonneesSimulation avec toutes les données du fichier map

2) Comprendre l'histoire du simulateur (dossier GUI) j'ai pas tout compris, j'ai juste créé les classes selon la doc qu'ils donnaient
- compléter les classes GUISimulator, Simulable, Simulateur, Text, Rectangle, GraphicalElement

3) Simulation de scénarios
- ajout d'un gestionnaire d'évènements au simulateur
- créer des fichiers de test avec la méthode main

!!!! Il est pas demandé d'avoir une couverture de tests fonctionnels :D

4) Calcul du plus court chemin
- calcul
- traduire cela en évènement de déplacement
- inclure dans le simulateur

5) Résolution du problème

